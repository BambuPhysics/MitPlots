? RecoLocalTracker/SiPixelRecHits/python/__init__.py
Index: RecoLocalTracker/SiPixelRecHits/interface/SiPixelRecHitConverter.h
===================================================================
RCS file: /cvs_server/repositories/CMSSW/CMSSW/RecoLocalTracker/SiPixelRecHits/interface/SiPixelRecHitConverter.h,v
retrieving revision 1.22
diff -u -r1.22 SiPixelRecHitConverter.h
--- RecoLocalTracker/SiPixelRecHits/interface/SiPixelRecHitConverter.h	5 May 2009 20:29:31 -0000	1.22
+++ RecoLocalTracker/SiPixelRecHits/interface/SiPixelRecHitConverter.h	5 Nov 2009 09:37:51 -0000
@@ -33,7 +33,7 @@
 
 //--- Base class for CPEs:
 #include "RecoLocalTracker/ClusterParameterEstimator/interface/PixelClusterParameterEstimator.h"
-//&&& #include "RecoLocalTracker/SiPixelRecHits/interface/PixelCPEBase.h"
+#include "RecoLocalTracker/SiPixelRecHits/interface/PixelCPEBase.h"
 
 //--- Geometry + DataFormats
 #include "Geometry/TrackerGeometryBuilder/interface/TrackerGeometry.h"
@@ -97,7 +97,7 @@
     // TO DO: maybe allow a map of pointers?
     std::string cpeName_;                   // what the user said s/he wanted
     const PixelClusterParameterEstimator * cpe_;  // what we got (for now, one ptr to base class)
-    //&&& PixelCPEBase * cpe_;                    // what we got (for now, one ptr to base class)
+    const PixelCPEBase * cpe2_;                   // what we got (for now, one ptr to base class)
     bool ready_;                            // needed CPE's valid => good to go!
     edm::InputTag src_;
     int   theVerboseLevel;              // algorithm's verbosity
Index: RecoLocalTracker/SiPixelRecHits/plugins/SiPixelRecHitConverter.cc
===================================================================
RCS file: /cvs_server/repositories/CMSSW/CMSSW/RecoLocalTracker/SiPixelRecHits/plugins/SiPixelRecHitConverter.cc,v
retrieving revision 1.14
diff -u -r1.14 SiPixelRecHitConverter.cc
--- RecoLocalTracker/SiPixelRecHits/plugins/SiPixelRecHitConverter.cc	5 May 2009 20:29:45 -0000	1.14
+++ RecoLocalTracker/SiPixelRecHits/plugins/SiPixelRecHitConverter.cc	5 Nov 2009 09:37:51 -0000
@@ -53,6 +53,7 @@
     conf_(conf),
     cpeName_("None"),     // bogus
     cpe_(0),              // the default, in case we fail to make one
+    cpe2_(0),              // the default, in case we fail to make one
     ready_(false),        // since we obviously aren't
     src_( conf.getParameter<edm::InputTag>( "src" ) ),
     theVerboseLevel(conf.getUntrackedParameter<int>("VerboseLevel",0))
@@ -99,7 +100,10 @@
 		const PixelClusterParameterEstimator &cpe(*hCPE);
 		cpe_ = &cpe;
 		
-		if(cpe_) ready_ = true;
+		if(cpe_) {
+                  ready_ = true;
+                  cpe2_ = dynamic_cast<const PixelCPEBase *>(cpe_);
+                }
 
 
     // Step C: Iterate over DetIds and invoke the strip CPE algorithm
@@ -159,20 +163,14 @@
 				// Make a RecHit and add it to the DetSet
 				// old : recHitsOnDetUnit.push_back( new SiPixelRecHit( lp, le, detIdObject, &*clustIt) );
 				SiPixelRecHit hit( lp, le, detIdObject, cluster);
-				#ifdef SIPIXELRECHIT_HAS_EXTRA_INFO
 				// Copy the extra stuff; unfortunately, only the derivatives of PixelCPEBase
 				// are capable of doing that.  So until we get rid of CPEFromDetPosition
 				// we'll have to dynamic_cast :(
 				// &&& This cast can be moved to the setupCPE, so that it's done once per job.
-				PixelCPEBase * cpeBase = dynamic_cast< PixelCPEBase* >( cpe_ );
-				if (cpeBase) {
-					hit.setProbabilityX( cpeBase->probabilityX() );
-					hit.setProbabilityY( cpeBase->probabilityY() );
-					hit.setQBin( cpeBase->qBin() );
-					hit.setCotAlphaFromCluster( cpeBase->cotAlphaFromCluster() );
-					hit.setCotBetaFromCluster ( cpeBase->cotBetaFromCluster()  );
-				}
-				#endif
+				//PixelCPEBase * cpeBase = dynamic_cast< PixelCPEBase* >( cpe_ );
+				if (cpe2_) {
+                                  hit.setRawQualityWord( cpe2_->rawQualityWord());
+                                }
 				// 
 				// Now save it =================
 				recHitsOnDetUnit.push_back(hit);
